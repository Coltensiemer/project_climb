// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}



model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                Int      @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             Int       @id @default(autoincrement())
    name           String?
    userName       String?   @unique
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    freeAccount    Boolean
    premiumAccount Boolean
    accounts       Account[]
    sessions       Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Gym {
    id        Int      @id @default(autoincrement())
    gymName   String   @unique
    email     String
    address   String?
    image     String?
    events    String //add relation to teams 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model USAClimbingEvents {
    id         Int               @id @default(autoincrement())
    event      String
    resultsURL String           @unique
    results    USAEventResults[]
    createdAt  DateTime          @default(now())

}

model USAEventResults {
    id       Int                @id @default(autoincrement())
    event    USAClimbingEvents? @relation(fields: [eventid], references: [id])
    eventid  Int
    location String
    date     String
    climbers ClimberResult[]

}

model ClimberResult {
    id        Int             @id @default(autoincrement())
    climber   Climber         @relation(fields: [climberId], references: [id])
    climberId Int
    event     USAEventResults @relation(fields: [eventId], references: [id])
    eventId   Int
    rank      Int
    points    Float
}

model Climber {
    id              Int             @id @default(autoincrement())
    name            String          
    region          String
    categroy        String?
    qe_rank_boulder Int?
    qu_rank_lead    Int?
    membership      Int?
    city            String?
    state           String?
    team            Teams           @relation(fields: [teamId], references: [id])
    teamId          Int
    results         ClimberResult[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Teams {
    id        Int       @id @default(autoincrement())
    team_name String    @unique
    region    String
    city      String?
    state     String?
    website   String?
    contact   String?
    climbers  Climber[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
