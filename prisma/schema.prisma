generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  schemas         = ["public", "auth"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  freeAccount    Boolean
  premiumAccount Boolean
  userName       String?   @unique
  id             Int       @id @default(autoincrement())
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Gym {
  gymName   String   @unique
  email     String
  address   String?
  image     String?
  events    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  id        Int      @id @default(autoincrement())
}

model USAClimbingEvents {
  event      String
  resultsURL String            @unique
  id         Int               @id @default(autoincrement())
  createdAt  DateTime          @default(now())
  results    USAEventResults[]
}

model USAEventResults {
  date     String
  location String
  id       Int               @id @default(autoincrement())
  eventid  Int
  climbers ClimberResult[]
  event    USAClimbingEvents @relation(fields: [eventid], references: [id])
}

model ClimberResult {
  eventId   Int
  rank      Int
  points    Float
  id        Int             @id @default(autoincrement())
  climberId Int
  climber   Climber         @relation(fields: [climberId], references: [id])
  event     USAEventResults @relation(fields: [eventId], references: [id])
}

model Climber {
  name            String
  region          String
  categroy        String?
  qe_rank_boulder Int?
  qu_rank_lead    Int?
  membership      Int?
  city            String?
  state           String?
  createdAt       DateTime        @default(now())
  teamId          Int
  updatedAt       DateTime        @updatedAt
  id              Int             @id @default(autoincrement())
  team            Teams           @relation(fields: [teamId], references: [id])
  results         ClimberResult[]
}

model Teams {
  team_name String    @unique
  region    String
  city      String?
  state     String?
  website   String?
  contact   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  id        Int       @id @default(autoincrement())
  climbers  Climber[]
}

model Example {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime
}
